import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:qr_flutter/qr_flutter.dart';
import '../models/post.dart';
import '../models/author.dart';
import '../models/comment.dart';
import '../models/supporter.dart';
import '../providers/auth_provider.dart';
import '../services/api_service.dart';
import '../services/deep_link_service.dart';
import '../services/post_service.dart';
import '../config/api_config.dart';
import '../widgets/animated_copy_button.dart';
import '../widgets/custom_snackbar.dart';
import '../widgets/qr_dialog.dart';
import '../widgets/supporters_dialog.dart';
import '../screens/user_profile_screen.dart';
import '../utils/responsive_layout.dart';
import '../widgets/responsive_container.dart';
import 'package:timeago/timeago.dart' as timeago;
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import 'package:archive/archive.dart';
import 'package:path/path.dart' as path;
import 'package:permission_handler/permission_handler.dart';
import 'package:video_player/video_player.dart';

class PostDetailsScreen extends StatefulWidget {
  final Post post;

  const PostDetailsScreen({
    super.key,
    required this.post,
  });

  @override
  State<PostDetailsScreen> createState() => _PostDetailsScreenState();
}

class _PostDetailsScreenState extends State<PostDetailsScreen> {
  final _commentController = TextEditingController();
  final _formKey = GlobalKey<FormState>();
  bool _isLoading = false;
  List<Comment> _comments = [];
  String? _error;
  Uint8List? _mediaBytes;
  VideoPlayerController? _videoController;
  bool _isVideoInitialized = false;
  SupportersInfo? _supportersInfo;
  bool _isLoadingSupporters = false;

  @override
  void initState() {
    super.initState();
    _loadMedia();
    _loadComments();
    _loadSupporters();
  }
  
  Future<void> _loadSupporters() async {
    if (widget.post.contentHash == null) return;
    
    setState(() => _isLoadingSupporters = true);
    
    try {
      final cleanHash = widget.post.contentHash!.replaceAll('UR:VERIFY-POST/', '');
      final supportersInfo = await ApiService.getPostSupporters(cleanHash);
      
      if (mounted) {
        setState(() {
          _supportersInfo = supportersInfo;
          _isLoadingSupporters = false;
        });
      }
    } catch (e) {
      debugPrint('Error loading supporters: $e');
      if (mounted) {
        setState(() => _isLoadingSupporters = false);
      }
    }
  }

  Future<void> _loadMedia() async {
    if (widget.post.mediaPath == null) {
      debugPrint('No media path available for post ${widget.post.id}');
      return;
    }

    debugPrint('Loading media from path: ${widget.post.mediaPath}');
    debugPrint('Media type: ${widget.post.mediaType}');
    
    try {
      // Try to load media directly using Image.network first to see if URL is accessible
      final mediaUrl = ApiConfig.getMediaUrl(widget.post.mediaPath!);
      debugPrint('Constructed media URL: $mediaUrl');
      
      // Now try to download the media using our service
      final bytes = await PostService.downloadMedia(widget.post.mediaPath!);
      debugPrint('Media downloaded successfully, bytes length: ${bytes.length}');
      
      if (mounted) {
        setState(() {
          _mediaBytes = bytes;
          debugPrint('Media bytes set in state, length: ${_mediaBytes?.length}');
        });

        if (widget.post.mediaType == 'video' && _mediaBytes != null) {
          await _initializeVideoPlayer();
        }
      }
    } catch (e) {
      debugPrint('Error loading media: $e');
      debugPrint('Stack trace: ${StackTrace.current}');
      if (mounted) {
        setState(() => _error = 'Failed to load media: $e');
      }
    }
  }

  Future<void> _initializeVideoPlayer() async {
    if (_mediaBytes == null) return;

    // Create a temporary file to store the video
    final tempDir = await getTemporaryDirectory();
    final tempFile = File('${tempDir.path}/temp_video.mp4');
    await tempFile.writeAsBytes(_mediaBytes!);

    _videoController = VideoPlayerController.file(tempFile);
    await _videoController!.initialize();
    
    if (mounted) {
      setState(() {
        _isVideoInitialized = true;
      });
    }
  }

  @override
  void dispose() {
    _commentController.dispose();
    _videoController?.dispose();
    super.dispose();
  }

  Future<void> _loadComments() async {
    setState(() => _isLoading = true);
    
    try {
      final comments = await ApiService.getPostComments(widget.post.id!);
      
      if (mounted) {
        setState(() {
          _comments = comments;
          _isLoading = false;
        });
      }
    } catch (e) {
      debugPrint('Error loading comments: $e');
      if (mounted) {
        setState(() {
          _error = 'Failed to load comments: $e';
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _refreshPost() async {
    try {
      final updatedPost = await ApiService.getPost(widget.post.id!);
      if (mounted) {
        setState(() {
          // Update post data
        });
      }
      await _loadComments();
    } catch (e) {
      debugPrint('Error refreshing post: $e');
      if (mounted) {
        setState(() {
          _error = 'Failed to refresh post: $e';
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _submitComment() async {
    if (!_formKey.currentState!.validate()) return;
    
    setState(() => _isLoading = true);
    
    try {
      final comment = await ApiService.createComment(
        widget.post.id!,
        _commentController.text.trim(),
      );
      
      if (mounted) {
        setState(() {
          _comments.add(comment);
          _isLoading = false;
          _commentController.clear();
        });
      }
    } catch (e) {
      debugPrint('Error creating comment: $e');
      if (mounted) {
        setState(() {
          _error = 'Failed to create comment: $e';
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _deleteComment(Comment comment) async {
    setState(() => _isLoading = true);
    
    try {
      await ApiService.deleteComment(comment.id!);
      
      if (mounted) {
        setState(() {
          _comments.removeWhere((c) => c.id == comment.id);
          _isLoading = false;
        });
      }
    } catch (e) {
      debugPrint('Error deleting comment: $e');
      if (mounted) {
        setState(() {
          _error = 'Failed to delete comment: $e';
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _handleSendReputation(BuildContext context) async {
    if (widget.post.contentHash == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Cannot support: Post hash not available')),
      );
      return;
    }

    try {
      final cleanHash = widget.post.contentHash!.replaceAll('UR:VERIFY-POST/', '');
      final result = await DeepLinkService.openSendReputationLink(cleanHash);
      
      if (result) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Support request sent successfully')),
          );
        }
      }
    } catch (e) {
      debugPrint('Error sending reputation: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to send support request: $e')),
        );
      }
    }
  }

  Future<void> _handleVerify(BuildContext context) async {
    if (widget.post.contentHash == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Cannot verify: Post hash not available')),
      );
      return;
    }

    try {
      final cleanHash = widget.post.contentHash!.replaceAll('UR:VERIFY-POST/', '');
      final result = await DeepLinkService.openVerifyLink(cleanHash);
      
      if (result) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Verification request sent successfully')),
          );
        }
      }
    } catch (e) {
      debugPrint('Error verifying post: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to send verification request: $e')),
        );
      }
    }
  }

  void _showQRDialog(BuildContext context) {
    if (widget.post.contentHash == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Cannot show QR code: Post hash not available')),
      );
      return;
    }

    final cleanHash = widget.post.contentHash!.replaceAll('UR:VERIFY-POST/', '');
    showQRDialog(
      context: context,
      title: 'Post Verification QR',
      qrData: cleanHash,
      subtitle: 'Scan to verify this post',
    );
  }

  Future<void> _exportPost() async {
    setState(() => _isLoading = true);
    
    try {
      final tempDir = await getTemporaryDirectory();
      final exportDir = Directory('${tempDir.path}/export_${DateTime.now().millisecondsSinceEpoch}');
      await exportDir.create();
      
      // Create the W3-S-POST-NFT standard JSON
      final postJson = widget.post.toW3SimplePostNFT();
      final jsonFile = File('${exportDir.path}/post.json');
      await jsonFile.writeAsString(jsonEncode(postJson));
      
      // If there's media, include it
      if (_mediaBytes != null && widget.post.mediaPath != null) {
        final mediaExtension = path.extension(widget.post.mediaPath!);
        final mediaFile = File('${exportDir.path}/files/media$mediaExtension');
        await mediaFile.create(recursive: true);
        await mediaFile.writeAsBytes(_mediaBytes!);
      }
      
      // Create a ZIP archive
      final archive = Archive();
      
      // Add JSON file to archive
      final jsonBytes = await jsonFile.readAsBytes();
      final jsonArchiveFile = ArchiveFile('post.json', jsonBytes.length, jsonBytes);
      archive.addFile(jsonArchiveFile);
      
      // Add media file to archive if it exists
      if (_mediaBytes != null && widget.post.mediaPath != null) {
        final mediaExtension = path.extension(widget.post.mediaPath!);
        final mediaArchiveFile = ArchiveFile(
          'files/media$mediaExtension', 
          _mediaBytes!.length, 
          _mediaBytes!
        );
        archive.addFile(mediaArchiveFile);
      }
      
      // Write the archive to a file
      final zipEncoder = ZipEncoder();
      final zipData = zipEncoder.encode(archive);
      if (zipData == null) {
        throw Exception('Failed to create ZIP archive');
      }
      
      final zipFile = File('${tempDir.path}/${widget.post.name ?? 'post'}_${DateTime.now().millisecondsSinceEpoch}.zip');
      await zipFile.writeAsBytes(zipData);
      
      // Share the file
      await Share.shareXFiles(
        [XFile(zipFile.path)],
        subject: 'Sharing Post: ${widget.post.name ?? 'Untitled Post'}',
        text: 'Here is a portable post created with ZPost',
      );
      
      // Clean up
      await exportDir.delete(recursive: true);
      
      if (mounted) {
        setState(() => _isLoading = false);
      }
    } catch (e) {
      debugPrint('Error exporting post: $e');
      if (mounted) {
        setState(() => _isLoading = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to export post: $e')),
        );
      }
    }
  }

  Widget _buildPostContent() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (widget.post.name != null)
            Padding(
              padding: const EdgeInsets.only(bottom: 8.0),
              child: Text(
                widget.post.name!,
                style: const TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          if (widget.post.content != null)
            Padding(
              padding: const EdgeInsets.only(bottom: 16.0),
              child: Text(
                widget.post.content!,
                style: const TextStyle(
                  fontSize: 16,
                ),
              ),
            ),
          if (widget.post.mediaPath != null)
            _buildMediaContent(),
        ],
      ),
    );
  }

  Widget _buildMediaContent() {
    if (_isLoading && _mediaBytes == null) {
      return const Center(
        child: Padding(
          padding: EdgeInsets.all(16.0),
          child: CircularProgressIndicator(),
        ),
      );
    }
    
    if (_error != null) {
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            _error!,
            style: TextStyle(
              color: Theme.of(context).colorScheme.error,
            ),
          ),
        ),
      );
    }
    
    if (_mediaBytes == null) {
      return const Center(
        child: Padding(
          padding: EdgeInsets.all(16.0),
          child: Text('Media not available'),
        ),
      );
    }
    
    if (widget.post.mediaType == 'image') {
      return ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: Image.memory(
          _mediaBytes!,
          fit: BoxFit.cover,
          width: double.infinity,
        ),
      );
    } else if (widget.post.mediaType == 'video' && _isVideoInitialized && _videoController != null) {
      return Column(
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(12),
            child: AspectRatio(
              aspectRatio: _videoController!.value.aspectRatio,
              child: VideoPlayer(_videoController!),
            ),
          ),
          const SizedBox(height: 8),
          _VideoControls(controller: _videoController!),
        ],
      );
    } else {
      return const Center(
        child: Padding(
          padding: EdgeInsets.all(16.0),
          child: Text('Unsupported media type'),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final currentUser = Provider.of<AuthProvider>(context, listen: false);
    final bool isCurrentUser = currentUser.publicKeyHash == widget.post.author.publicKeyHash;
    final authorName = widget.post.author.name ?? 'Anonymous';
    
    // Get responsive layout information
    final isMobile = ResponsiveLayout.isMobile(context);
    final isTablet = ResponsiveLayout.isTablet(context);
    final isDesktop = ResponsiveLayout.isDesktop(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.post.name ?? 'Post Details'),
        actions: [
          IconButton(
            icon: const Icon(Icons.ios_share),
            onPressed: _isLoading ? null : _exportPost,
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: _refreshPost,
        child: Center(
          child: ResponsiveContainer(
            maxWidth: isDesktop ? 800 : (isTablet ? 600 : double.infinity),
            padding: ResponsiveLayout.getScreenPadding(context),
            child: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  ListTile(
                    leading: GestureDetector(
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => UserProfileScreen(
                              publicKeyHash: widget.post.author.publicKeyHash,
                              name: widget.post.author.name,
                            ),
                          ),
                        );
                      },
                      child: CircleAvatar(
                        backgroundImage: widget.post.author.image != null
                            ? MemoryImage(base64Decode(widget.post.author.image!))
                            : null,
                        child: widget.post.author.image == null
                            ? const Icon(Icons.person)
                            : null,
                      ),
                    ),
                    title: GestureDetector(
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => UserProfileScreen(
                              publicKeyHash: widget.post.author.publicKeyHash,
                              name: widget.post.author.name,
                            ),
                          ),
                        );
                      },
                      child: Text(widget.post.author.name ?? 'Anonymous'),
                    ),
                    subtitle: Text(
                      timeago.format(widget.post.createdAt),
                    ),
                    trailing: widget.post.contentHash != null
                        ? IconButton(
                            icon: const Icon(Icons.qr_code),
                            onPressed: () => _showQRDialog(context),
                          )
                        : null,
                  ),
                  _buildPostContent(),
                  const SizedBox(height: 16),
                  // Action buttons
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        FilledButton.icon(
                          onPressed: () => _handleSendReputation(context),
                          icon: const Icon(Icons.account_balance_wallet),
                          label: const Text('Support'),
                          style: FilledButton.styleFrom(
                            backgroundColor: Theme.of(context).colorScheme.primary,
                            foregroundColor: Theme.of(context).colorScheme.onPrimary,
                            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                          ),
                        ),
                        const SizedBox(width: 16),
                        FilledButton.icon(
                          onPressed: () => _handleVerify(context),
                          icon: const Icon(Icons.verified),
                          label: const Text('Verify'),
                          style: FilledButton.styleFrom(
                            backgroundColor: Theme.of(context).colorScheme.secondary,
                            foregroundColor: Theme.of(context).colorScheme.onSecondary,
                            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 24),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        Text(
                          '${widget.post.reputationPoints} RPs',
                          style: const TextStyle(
                            color: Colors.grey,
                            fontSize: 14,
                          ),
                        ),
                        const SizedBox(width: 16),
                        InkWell(
                          onTap: () {
                            if (widget.post.contentHash != null) {
                              final cleanHash = widget.post.contentHash!.replaceAll('UR:VERIFY-POST/', '');
                              showSupportersDialog(context, cleanHash);
                            } else {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(content: Text('Cannot show supporters: Post hash not available')),
                              );
                            }
                          },
                          child: Row(
                            children: [
                              _isLoadingSupporters
                                ? const SizedBox(
                                    width: 14,
                                    height: 14,
                                    child: CircularProgressIndicator(strokeWidth: 2),
                                  )
                                : const Icon(Icons.people, size: 14, color: Colors.grey),
                              const SizedBox(width: 4),
                              Text(
                                _supportersInfo != null 
                                  ? '${_supportersInfo!.totalSupporters} Supporters'
                                  : '${widget.post.supporterCount} Supporters',
                                style: const TextStyle(
                                  color: Colors.grey,
                                  fontSize: 14,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: const Text(
                      'Comments',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: Form(
                      key: _formKey,
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          Expanded(
                            child: TextFormField(
                              controller: _commentController,
                              decoration: InputDecoration(
                                hintText: 'Write a comment...',
                                filled: true,
                                fillColor: Theme.of(context).colorScheme.surfaceVariant.withOpacity(0.5),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(24),
                                  borderSide: BorderSide.none,
                                ),
                                contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                              ),
                              validator: (value) {
                                if (value == null || value.trim().isEmpty) {
                                  return 'Please enter a comment';
                                }
                                return null;
                              },
                              minLines: 1,
                              maxLines: 5,
                            ),
                          ),
                          const SizedBox(width: 8),
                          IconButton(
                            icon: _isLoading
                                ? const SizedBox(
                                    width: 20,
                                    height: 20,
                                    child: CircularProgressIndicator(),
                                  )
                                : Icon(
                                    Icons.send_rounded,
                                    color: Theme.of(context).colorScheme.primary,
                                  ),
                            onPressed: _isLoading ? null : _submitComment,
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  if (_isLoading && _comments.isEmpty)
                    const Center(child: CircularProgressIndicator())
                  else if (_error != null)
                    Center(
                      child: Text(
                        _error!,
                        style: TextStyle(
                          color: Theme.of(context).colorScheme.error,
                        ),
                      ),
                    )
                  else if (_comments.isEmpty)
                    Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Center(
                        child: Text(
                          'No comments yet. Be the first to comment!',
                          style: TextStyle(
                            color: Theme.of(context).colorScheme.onSurfaceVariant,
                          ),
                        ),
                      ),
                    )
                  else
                    ListView.builder(
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      itemCount: _comments.length,
                      itemBuilder: (context, index) {
                        final comment = _comments[index];
                        final isAuthor = context
                                .read<AuthProvider>()
                                .publicKeyHash ==
                            comment.author.publicKeyHash;

                        return Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 4.0),
                          child: Row(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              CircleAvatar(
                                radius: 16,
                                backgroundColor: Theme.of(context).colorScheme.secondaryContainer,
                                foregroundColor: Theme.of(context).colorScheme.onSecondaryContainer,
                                child: Text(
                                  (comment.author.name?.isNotEmpty ?? false)
                                      ? comment.author.name![0].toUpperCase()
                                      : 'A',
                                ),
                              ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Container(
                                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                                  decoration: BoxDecoration(
                                    color: Theme.of(context).colorScheme.surfaceVariant.withOpacity(0.5),
                                    borderRadius: BorderRadius.circular(16),
                                  ),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Row(
                                        children: [
                                          Text(
                                            comment.author.name ?? 'Anonymous',
                                            style: const TextStyle(
                                              fontWeight: FontWeight.bold,
                                            ),
                                          ),
                                          const SizedBox(width: 8),
                                          Text(
                                            timeago.format(comment.createdAt),
                                            style: TextStyle(
                                              color: Theme.of(context).colorScheme.onSurfaceVariant,
                                              fontSize: 12,
                                            ),
                                          ),
                                          if (isAuthor) const Spacer(),
                                          if (isAuthor)
                                            IconButton(
                                              icon: Icon(
                                                Icons.delete_outline,
                                                size: 18,
                                                color: Theme.of(context).colorScheme.error,
                                              ),
                                              onPressed: () => _deleteComment(comment),
                                              padding: EdgeInsets.zero,
                                              constraints: const BoxConstraints(),
                                            ),
                                        ],
                                      ),
                                      const SizedBox(height: 4),
                                      Text(
                                        comment.content,
                                        style: TextStyle(
                                          color: Theme.of(context).colorScheme.onSurface,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}

class _VideoControls extends StatelessWidget {
  final VideoPlayerController controller;

  const _VideoControls({Key? key, required this.controller}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        IconButton(
          icon: Icon(
            controller.value.isPlaying ? Icons.pause : Icons.play_arrow,
            size: 24,
            color: Theme.of(context).colorScheme.onSurface,
          ),
          onPressed: () {
            if (controller.value.isPlaying) {
              controller.pause();
            } else {
              controller.play();
            }
          },
        ),
        Expanded(
          child: VideoProgressIndicator(
            controller,
            allowScrubbing: true,
            padding: const EdgeInsets.all(8.0),
          ),
        ),
        IconButton(
          icon: const Icon(Icons.fullscreen, size: 24),
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => Scaffold(
                  body: Center(
                    child: AspectRatio(
                      aspectRatio: controller.value.aspectRatio,
                      child: VideoPlayer(controller),
                    ),
                  ),
                ),
              ),
            );
          },
        ),
      ],
    );
  }
}
